{"version":3,"sources":["Today/Today.js","App.js","serviceWorker.js","index.js"],"names":["Today","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","btcprice","ltcprice","ethprice","_this2","axios","get","then","response","setState","data","BTC","USD","ETH","LTC","catch","error","console","log","react_default","a","createElement","className","Component","App","href","target","rel","src_Today_Today","History_default","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qUAoDmBA,cA9CX,SAAAA,IAAe,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACTC,SAAU,GACVC,SAAU,GACVC,SAAU,IALHV,oFASO,IAAAW,EAAAR,KAClBS,IAAMC,IAAI,iFACLC,KAAK,SAAAC,GAEFJ,EAAKK,SAAS,CAAER,SAAUO,EAASE,KAAKC,IAAIC,MAC5CR,EAAKK,SAAS,CAAEN,SAAUK,EAASE,KAAKG,IAAID,MAC5CR,EAAKK,SAAS,CAAEP,SAAUM,EAASE,KAAKI,IAAIF,QAG/CG,MAAM,SAAAC,GACHC,QAAQC,IAAIF,sCAKpB,OACIG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACXH,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACXH,EAAAC,EAAAC,cAAA,cAAMzB,KAAKI,MAAMC,UACjBkB,EAAAC,EAAAC,cAAA,mBAEJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACXH,EAAAC,EAAAC,cAAA,cAAMzB,KAAKI,MAAMG,UACjBgB,EAAAC,EAAAC,cAAA,mBAEJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACXH,EAAAC,EAAAC,cAAA,cAAMzB,KAAKI,MAAME,UACjBiB,EAAAC,EAAAC,cAAA,4BAxCRE,8BCmCDC,mLA5BX,OACEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,IACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAhB,gBAEJH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAcG,KAAK,qBAAqBC,OAAO,SAASC,IAAI,uBAAzE,kBAKhBR,EAAAC,EAAAC,cAAA,WAASC,UAAU,oBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,8DAAqDF,EAAAC,EAAAC,cAAA,WAArD,uBAEJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACXH,EAAAC,EAAAC,cAACO,EAAD,MACAT,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,gBAtBAG,aCGFO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,KAAK,SAAAoC,GACjCA,EAAaC","file":"static/js/main.5c321a00.chunk.js","sourcesContent":["import React, { Component } from 'react';\n    import './Today.css'\n    import axios from 'axios'\n\nclass Today extends Component {\n        // Adds a class constructor that assigns the initial state values:\n        constructor () {\n            super();\n            this.state = {\n                btcprice: '',\n                ltcprice: '',\n                ethprice: ''\n            };\n        }\n        // This is called when an instance of a component is being created and inserted into the DOM.\n        componentWillMount () {\n            axios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC&tsyms=USD')\n                .then(response => {\n                    // We set the latest prices in the state to the prices gotten from Cryptocurrency.\n                    this.setState({ btcprice: response.data.BTC.USD });\n                    this.setState({ ethprice: response.data.ETH.USD });\n                    this.setState({ ltcprice: response.data.LTC.USD });\n                })\n                // Catch any error here\n                .catch(error => {\n                    console.log(error)\n                })\n        }\n        // The render method contains the JSX code which will be compiled to HTML.\n        render() {\n            return (\n                <div className=\"today--section container\">\n                    <h2>Current Price</h2>\n                    <div className=\"columns today--section__box\">\n                        <div className=\"column btc--section\">\n                            <h5>${this.state.btcprice}</h5>\n                            <p>1 BTC</p>\n                        </div>\n                        <div className=\"column eth--section\">\n                            <h5>${this.state.ethprice}</h5>\n                            <p>1 ETH</p>\n                        </div>\n                        <div className=\"column ltc--section\">\n                            <h5>${this.state.ltcprice}</h5>\n                            <p>1 LTC</p>\n                        </div>\n                    </div>\n                </div>\n            )\n        }\n    }\n\n    export default Today;","// Import React and Component\n    import React, { Component } from 'react';\n    // Import CSS from App.css\n    import './App.css';\n    // Import the Today component to be used below\n    import Today from './Today/Today'\n    // Import the History component to be used below\n    import History from './History/History'\n\n    class App extends Component {\n      render() {\n        return (\n          <div className=\"\">\n              <div className=\"topheader\">\n                  <header className=\"container\">\n                      <nav className=\"navbar\">\n                          <div className=\"navbar-brand\">\n                              <span className=\"navbar-item\">PusherCoins</span>\n                          </div>\n                          <div className=\"navbar-end\">\n                              <a className=\"navbar-item\" href=\"https://pusher.com\" target=\"_blank\" rel=\"noopener noreferrer\">Pusher.com</a>\n                          </div>\n                      </nav>\n                  </header>\n              </div>\n              <section className=\"results--section\">\n                  <div className=\"container\">\n                      <h1>PusherCoins is a realtime price information about<br></br> BTC, ETH and LTC.</h1>\n                  </div>\n                  <div className=\"results--section__inner\">\n                      <Today />\n                      <History />\n                  </div>\n              </section>\n          </div>\n        );\n      }\n    }\n\n    export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}